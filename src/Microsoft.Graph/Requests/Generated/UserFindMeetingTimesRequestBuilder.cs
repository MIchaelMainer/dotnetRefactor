// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Requests\MethodRequestBuilder.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;

    /// <summary>
    /// The type UserFindMeetingTimesRequestBuilder.
    /// </summary>
    public partial class UserFindMeetingTimesRequestBuilder : BaseActionMethodRequestBuilder<IUserFindMeetingTimesRequest>, IUserFindMeetingTimesRequestBuilder
    {
        /// <summary>
        /// Constructs a new <see cref="UserFindMeetingTimesRequestBuilder"/>.
        /// </summary>
        /// <param name="requestUrl">The URL for the request.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="Attendees">A Attendees parameter for the OData method call.</param>
        /// <param name="LocationConstraint">A LocationConstraint parameter for the OData method call.</param>
        /// <param name="TimeConstraint">A TimeConstraint parameter for the OData method call.</param>
        /// <param name="MeetingDuration">A MeetingDuration parameter for the OData method call.</param>
        /// <param name="MaxCandidates">A MaxCandidates parameter for the OData method call.</param>
        /// <param name="IsOrganizerOptional">A IsOrganizerOptional parameter for the OData method call.</param>
        /// <param name="ReturnSuggestionReasons">A ReturnSuggestionReasons parameter for the OData method call.</param>
        /// <param name="MinimumAttendeePercentage">A MinimumAttendeePercentage parameter for the OData method call.</param>
        public UserFindMeetingTimesRequestBuilder(
            string requestUrl,
            IBaseClient client,
            IEnumerable<AttendeeBase> Attendees,
            LocationConstraint LocationConstraint,
            TimeConstraint TimeConstraint,
            Duration MeetingDuration,
            Int32? MaxCandidates,
            bool? IsOrganizerOptional,
            bool? ReturnSuggestionReasons,
            double? MinimumAttendeePercentage)
            : base(requestUrl, client)
        {
            this.SetParameter("attendees", Attendees, true);
            this.SetParameter("locationConstraint", LocationConstraint, true);
            this.SetParameter("timeConstraint", TimeConstraint, true);
            this.SetParameter("meetingDuration", MeetingDuration, true);
            this.SetParameter("maxCandidates", MaxCandidates, true);
            this.SetParameter("isOrganizerOptional", IsOrganizerOptional, true);
            this.SetParameter("returnSuggestionReasons", ReturnSuggestionReasons, true);
            this.SetParameter("minimumAttendeePercentage", MinimumAttendeePercentage, true);
        }

        /// <summary>
        /// A method used by the base class to construct a request class instance.
        /// </summary>
        /// <param name="functionUrl">The request URL to </param>
        /// <param name="options">The query and header options for the request.</param>
        /// <returns>An instance of a specific request class.</returns>
        protected override IUserFindMeetingTimesRequest CreateRequest(string functionUrl, IEnumerable<Option> options)
        {
            var request = new UserFindMeetingTimesRequest(functionUrl, this.Client, options);

            if (this.HasParameter("attendees"))
            {
                request.RequestBody.Attendees = this.GetParameter<IEnumerable<AttendeeBase>>("attendees");
            }

            if (this.HasParameter("locationConstraint"))
            {
                request.RequestBody.LocationConstraint = this.GetParameter<LocationConstraint>("locationConstraint");
            }

            if (this.HasParameter("timeConstraint"))
            {
                request.RequestBody.TimeConstraint = this.GetParameter<TimeConstraint>("timeConstraint");
            }

            if (this.HasParameter("meetingDuration"))
            {
                request.RequestBody.MeetingDuration = this.GetParameter<Duration>("meetingDuration");
            }

            if (this.HasParameter("maxCandidates"))
            {
                request.RequestBody.MaxCandidates = this.GetParameter<Int32?>("maxCandidates");
            }

            if (this.HasParameter("isOrganizerOptional"))
            {
                request.RequestBody.IsOrganizerOptional = this.GetParameter<bool?>("isOrganizerOptional");
            }

            if (this.HasParameter("returnSuggestionReasons"))
            {
                request.RequestBody.ReturnSuggestionReasons = this.GetParameter<bool?>("returnSuggestionReasons");
            }

            if (this.HasParameter("minimumAttendeePercentage"))
            {
                request.RequestBody.MinimumAttendeePercentage = this.GetParameter<double?>("minimumAttendeePercentage");
            }

            return request;
        }
    }
}
